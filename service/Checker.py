import asyncio
import threading
import time
from typing import List

import requests

from command.enums.SiteState import SiteState
from command.utils.EncodingTime import EncoderTime
from command.utils.dataclasses.CheckResult import CheckResult
from service.DbManager import UrlsBdRepository
from service.Observer import Observer
from service.Publisher import Publisher


# –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç—Ä–µ–±—É–µ–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

class Checker(Publisher):

    # –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∏–∑–¥–∞—Ç–µ–ª—è

    def __init__(self, url_repo: UrlsBdRepository) -> None:
        # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        super().__init__()
        self.url_repo: UrlsBdRepository = url_repo
        # —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        self.t1 = None
        # –ø–æ—Ç–æ–∫
        self.encoder = EncoderTime()
        # –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        self.loop = None
        # loop
        self._observers: List[Observer] = []
        # —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

    def attach(self, observer: Observer) -> None:
        # –º–µ—Ç–æ–¥ –ø–æ–¥–ª–ø–∏—Å–∫–∏
        print("SUBJECT attached on observer")
        self._observers.append(observer)
        #  –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫

    def detach(self, observer: Observer) -> None:
        # –º–µ—Ç–æ–¥ –æ—Ç–ø–∏—Å–∫–∏
        self._observers.remove(observer)
        # —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞

    def notify(self, check_res) -> None:
        # –º–µ—Ç–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        print("Subject: Notifying observers...")
        for observer in self._observers:
            # –≤—ã–±–æ—Ä –∫–∞–∂–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
            observer.update(check_res, self.loop)
            # –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    def start(self, time_of_checking):
        # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥
        if self.t1 is not None and self.t1.is_alive():
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ç–æ–∫–∞
            return False
        try:
            self.loop = asyncio.get_event_loop()
            # —Å–æ–∑–¥–∞–Ω–∏–µ
        except Exception:
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)
        self.t1 = threading.Thread(target=lambda: self.check(time_of_checking), args=())
        self.t1.start()
        return True

    def check(self, time_of_checking: int):
        while self.url_repo.get_state() == True:

            for resource in self.url_repo.all_info():
                url = resource[0]
                old_status = resource[1]
                last_time = resource[2]
                chnl_id = resource[3]
                chnl_name = resource[4]
                category = resource[5]
                try:
                    r = requests.get(url, timeout=2)
                    status_code = r.status_code
                except Exception:
                    status_code = -1
                new_status = SiteState.READY if status_code == 200 else SiteState.NOT_READY
                data = time.time()
                if new_status.value != old_status:
                    self.url_repo.update_status(url, new_status.value, int(data))
                    if new_status == SiteState.READY:
                        date = data - last_time
                        time_of = self.encoder.encod(date)
                        check_res = CheckResult(url, time_of, status_code, new_status, old_status, chnl_id, chnl_name,
                                                category)
                        self.notify(check_res)
                    elif new_status == SiteState.NOT_READY:
                        date = data - last_time
                        time_of = self.encoder.encod(date)
                        check_res = CheckResult(url, time_of, status_code, new_status, old_status, chnl_id, chnl_name,
                                                category)
                        self.notify(check_res)

        time.sleep(int(time_of_checking))

    def fast_check(self):
        results = []
        for resource in self.url_repo.all_info():
            url = resource[0]
            old_status = resource[1]
            last_time = resource[2]
            try:
                r = requests.get(url, timeout=2)
                status_code = r.status_code
            except Exception:
                status_code = -1
            new_status = SiteState.READY if status_code == 200 else SiteState.NOT_READY
            data = time.time()
            if new_status.value != old_status:
                self.url_repo.update_status(url, new_status.value, int(data))
            if new_status == SiteState.READY:
                time_of = data - last_time
                results.append(f'üü¢{url} {self.encoder.encod(time_of)}üü¢')
            elif new_status == SiteState.NOT_READY:
                time_of = data - last_time
                emoji = 'üü†' if status_code == -1 else 'üî¥'
                results.append(f'{emoji}{url} {self.encoder.encod(time_of)} ERROR = {status_code}{emoji}')
        if len(results) != 0:
            results = '\n'.join(results)
            return results
